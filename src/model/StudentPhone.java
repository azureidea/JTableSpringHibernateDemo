package model;

import com.fasterxml.jackson.databind.annotation.*;
import controller.*;
import org.hibernate.*;
import org.springframework.format.annotation.*;

import javax.persistence.*;
import javax.validation.constraints.*;
import java.math.*;
import java.util.*;

@Entity
@Table(name = "student_phone")

public class StudentPhone {
    public static String dropSQL = "Drop table student_phone If Exists Cascade";
    public static String createSQL = "Create table student_phone (" +
            "  id Integer Generated By Default As Identity(Start With 1) primary key," +
            "  student_id Integer Not Null," +
            "  phone_type Integer Not Null," +
            "  phone_number Varchar(20)," +
            "  record_date Date" +
            ");";
    public static String alterSQL = "Alter table student_phone Add Constraint student_phone_student_fk Foreign Key (student_id) References student (id)";
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    public int id;
    public int student_id;
    @NotNull
    public int phone_type;
    @NotNull
    @Size(min = 8, max = 20)
    public String phone_number;
    @DateTimeFormat(pattern = BaseController.DATE_FORMAT)
    @JsonSerialize(using = JsonDateSerializer.class)
    public Date record_date;

    public static JTableResult retrievePage(Session session, int student_id, JTableRequest jTableRequest) {
        String orderBy = "phone_type";
        if (jTableRequest.jtSorting != null) orderBy = jTableRequest.jtSorting;
        String sql = "Select id, student_id, phone_type, phone_number, record_date From student_phone Where student_id = " + student_id +
                " Order By " + orderBy + " Offset " + jTableRequest.jtStartIndex + " Limit " + jTableRequest.jtPageSize;
        List<StudentPhone> rows = session.createNativeQuery(sql).addEntity(StudentPhone.class).list();

        JTableResult rslt = new JTableResult();
        rslt.Result = "OK";
        rslt.Records = rows;
        rslt.TotalRecordCount = ((BigInteger) session.createNativeQuery("Select count(*) From student_phone").getSingleResult()).intValue();

        return rslt;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public int getStudent_id() {
        return student_id;
    }

    public void setStudent_id(int student_id) {
        this.student_id = student_id;
    }

    public int getPhone_type() {
        return phone_type;
    }

    public void setPhone_type(int phone_type) {
        this.phone_type = phone_type;
    }

    public String getPhone_number() {
        return phone_number;
    }

    public void setPhone_number(String phone_number) {
        this.phone_number = phone_number;
    }

    public Date getRecord_date() {
        return record_date;
    }

    public void setRecord_date(Date record_date) {
        this.record_date = record_date;
    }
}
