package model;

import com.fasterxml.jackson.databind.annotation.*;
import controller.*;
import org.hibernate.*;
import org.hibernate.validator.constraints.*;
import org.springframework.format.annotation.*;

import javax.persistence.*;
import javax.validation.constraints.*;
import java.math.*;
import java.util.*;

@Entity
@Table(name = "student")
public class Student {
    public static String dropSQL = "Drop table student If Exists Cascade";
    public static String createSQL = "Create table student (" +
            "  id Integer Generated By Default As Identity(Start With 1) primary key," +
            "  name Varchar(50) Not Null," +
            "  email Varchar(50)," +
            "  password Varchar(50) Not Null," +
            "  gender Varchar(1) Not Null," +
            "  city_id Integer Not Null," +
            "  birth_date Date," +
            "  education Integer Not Null," +
            "  about Varchar(250)," +
            "  active_flg Varchar(1) Not Null," +
            "  record_date Date" +
            ");";
    public static String alterSQL = "Alter table student Add Constraint student_city_fk Foreign Key (city_id) References city (id)";
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    public int id;
    @NotNull
    @Size(min = 2, max = 30)
    public String name;
    @NotNull
    @Email
    public String email;
    @NotNull
    public String password;
    @NotNull
    public String gender;
    @NotNull
    public int city_id;
    /*
    All the Java bean properties (Example: firstname, lastname, email, etc.) that need to be stored to the database.
    But in some situation, we might have other properties that do not need to be stored in the database.
    In this case, we need to say to hibernate that do not take this property for all the Database operation.
    This can be done using @Transient annotation.
    (http://emrpms.blogspot.in/2012/06/annotate-non-persistent-properties-with.html)
     */
    @Transient
    public String city_name;
    @NotNull
    @DateTimeFormat(pattern = BaseController.DATE_FORMAT)
    @JsonSerialize(using = JsonDateSerializer.class)
    public Date birth_date;
    @NotNull
    public int education;
    public String about;
    public String active_flg;
    @DateTimeFormat(pattern = BaseController.DATE_FORMAT)
    @JsonSerialize(using = JsonDateSerializer.class)
    @Column(updatable = false)
    public Date record_date;

    public static JTableResult retrievePage(Session session, JTableRequest jTableRequest) {
        String orderBy = "name";
        if (jTableRequest.jtSorting != null) orderBy = jTableRequest.jtSorting;
        String sql = "Select id, name, email, password, gender, city_id, birth_date, education, about, active_flg, record_date From student Order By " + orderBy + " Offset " + jTableRequest.jtStartIndex + " Limit " + jTableRequest.jtPageSize;
        List<Student> rows = session.createNativeQuery(sql).addEntity(Student.class).list();

        JTableResult rslt = new JTableResult();
        rslt.Result = "OK";
        rslt.Records = rows;
        rslt.TotalRecordCount = ((BigInteger) session.createNativeQuery("Select count(*) From student").getSingleResult()).intValue();
       // For every student record city_name has to be obtained using the city_id.
        //  Since city_name is not part of the database.
        for (int i = 0; i < rows.size(); i++) {
            Student student = rows.get(i);
            student.city_name = City.getNameById(session, student.city_id);
        }
        return rslt;
    }

    public static Date getRecordDateById(Session session, int id) {
        return (Date) session.createNativeQuery("Select record_date From student Where id = " + id).getSingleResult();
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getGender() {
        return gender;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    public int getCity_id() {
        return city_id;
    }

    public void setCity_id(int city_id) {
        this.city_id = city_id;
    }

    public Date getBirth_date() {
        return birth_date;
    }

    public void setBirth_date(Date birth_date) {
        this.birth_date = birth_date;
    }

    public int getEducation() {
        return education;
    }

    public void setEducation(int education) {
        this.education = education;
    }

    public String getAbout() {
        return about;
    }

    public void setAbout(String about) {
        this.about = about;
    }

    public String getActive_flg() {
        return active_flg;
    }

    public void setActive_flg(String active_flg) {
        this.active_flg = active_flg;
    }

    public Date getRecord_date() {
        return record_date;
    }

    public void setRecord_date(Date record_date) {
        this.record_date = record_date;
    }

    public String getCity_name() {
        return city_name;
    }

    public void setCity_name(String city_name) {
        this.city_name = city_name;
    }
}
