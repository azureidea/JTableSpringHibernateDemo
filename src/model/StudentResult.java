package model;

import com.fasterxml.jackson.databind.annotation.*;
import controller.*;
import org.hibernate.*;
import org.springframework.format.annotation.*;

import javax.persistence.*;
import javax.validation.constraints.*;
import java.math.*;
import java.util.*;

@Entity
@Table(name = "student_result")
public class StudentResult {
    public static String dropSQL = "Drop table student_result If Exists Cascade";
    public static String createSQL = "Create table student_result (" +
            " id Integer Generated By Default As Identity(Start With 1) primary key," +
            " student_id Integer Not Null," +
            " course_id Integer," +
            " exam_date Date," +
            " degree Varchar (2)" +
            ");";
    public static String alterSQL = "Alter table student_result Add Constraint student_result_student_fk Foreign Key (student_id) References student (id)";
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    public int id;
    public int student_id;
    public int course_id;
    @NotNull
    @Transient
    public String course_name;
    @DateTimeFormat(pattern = BaseController.DATE_FORMAT)
    @JsonSerialize(using = JsonDateSerializer.class)
    public Date exam_date;
    public String degree;


    public static JTableResult retrievePage(Session session, int student_id, JTableRequest jTableRequest) {
        String orderBy = "course_id";
        if (jTableRequest.jtSorting != null) orderBy = jTableRequest.jtSorting;
        String sql = "Select id, student_id, course_id, exam_date, degree From student_result Where student_id = " + student_id +
                " Order By " + orderBy + " Offset " + jTableRequest.jtStartIndex + " Limit " + jTableRequest.jtPageSize;
        List<StudentResult> rows = session.createNativeQuery(sql).addEntity(StudentResult.class).list();

        JTableResult rslt = new JTableResult();
        rslt.Result = "OK";
        rslt.Records = rows;
        rslt.TotalRecordCount = ((BigInteger) session.createNativeQuery("Select count(*) From student_result").getSingleResult()).intValue();
        for (int i = 0; i < rows.size(); i++) {
            StudentResult studentresult = rows.get(i);
            studentresult.course_name = Course.getNameById(session, studentresult.course_id);
        }
        return rslt;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public int getStudent_id() {
        return student_id;
    }

    public String getCourse_name() {
        return course_name;
    }

    public void setCourse_name(String course_name) {
        this.course_name = course_name;
    }

    public void setStudent_id(int student_id) {
        this.student_id = student_id;
    }

    public int getCourse_id() {
        return course_id;
    }

    public void setCourse_id(int course_id) {
        this.course_id = course_id;
    }

    public Date getExam_date() {
        return exam_date;
    }

    public void setExam_date(Date exam_date) {
        this.exam_date = exam_date;
    }

    public String getDegree() {
        return degree;
    }

    public void setDegree(String degree) {
        this.degree = degree;
    }
}
